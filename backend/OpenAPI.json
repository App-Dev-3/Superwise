{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a greeting message"
          }
        },
        "summary": "Hello World endpoint",
        "tags": [
          "app"
        ]
      }
    },
    "/users": {
      "post": {
        "description": "Creates a new user (student, supervisor, or admin).",
        "operationId": "UsersController_createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User data to create a new user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data."
          },
          "409": {
            "description": "Conflict - User already exists."
          }
        },
        "summary": "Create new user",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Retrieves all users.",
        "operationId": "UsersController_findAllUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all active users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all users",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search/by-first-name": {
      "get": {
        "description": "Find Users by matching their first name.",
        "operationId": "UsersController_findUsersByFirstName",
        "parameters": [
          {
            "name": "firstName",
            "required": true,
            "in": "query",
            "description": "First name to search for (case insensitive, partial match)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return users matching the given first name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "summary": "Search users by first name",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search/by-last-name": {
      "get": {
        "description": "Find Users by matching their last name.",
        "operationId": "UsersController_findUsersByLastName",
        "parameters": [
          {
            "name": "lastName",
            "required": true,
            "in": "query",
            "description": "Last name to search for (case insensitive, partial match)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return users matching the given last name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "summary": "Search users by last name",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search/by-tag": {
      "get": {
        "description": "Find Users associated with a specific research interest or skill tag.",
        "operationId": "UsersController_findUsersByTagId",
        "parameters": [
          {
            "name": "tagId",
            "required": true,
            "in": "query",
            "description": "Tag ID to search for (UUID)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return users with the specified tag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid Tag ID format."
          },
          "404": {
            "description": "Not found - Tag does not exist."
          }
        },
        "summary": "Search users by tag ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search/by-tags": {
      "get": {
        "description": "Find Users associated with any of the specified research interests or skill tags.",
        "operationId": "UsersController_findUsersByTagIds",
        "parameters": [
          {
            "name": "tagIds",
            "required": true,
            "in": "query",
            "description": "Comma-separated list of tag IDs (UUIDs)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return users with any of the specified tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid Tag ID format in list."
          },
          "404": {
            "description": "Not found - One or more tags do not exist."
          }
        },
        "summary": "Search users by multiple tag IDs",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Retrieves a specific user by id.",
        "operationId": "UsersController_findUserById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The user ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the user with the matching id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid User ID format."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Get user by id",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "description": "Update a user's information such as name, email, role, and profile image.",
        "operationId": "UsersController_updateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID (UUID)",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The fields to update on the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or ID format."
          },
          "404": {
            "description": "User not found."
          },
          "409": {
            "description": "Conflict - Update violates unique constraint."
          }
        },
        "summary": "Update user",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Soft delete a user. Preserves data but marks as deleted.",
        "operationId": "UsersController_deleteUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID (UUID)",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User has been successfully deleted."
          },
          "400": {
            "description": "Bad request - Invalid User ID format."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Delete user (Soft Delete)",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/with-relations": {
      "get": {
        "description": "Retrieve a specific user with their student/supervisor profile, tags, and block relationships.",
        "operationId": "UsersController_findUserByIdWithRelations",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID (UUID)",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the user with the specified ID including relations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithRelations"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid User ID format."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Get user by ID with all related entities",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{userId}/tags": {
      "get": {
        "description": "Retrieves all tags assigned to a specific user with their priorities.",
        "operationId": "UsersController_findUserTagsByUserId",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID (UUID)",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of user tags",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid User ID format."
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Get all tags assigned to a user",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Updates all tags for a user with the specified priorities.",
        "operationId": "UsersController_setUserTagsByUserId",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User ID (UUID)",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The new tags and priorities for the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserTagsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User tags updated successfully. Returns the new list of user tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., invalid input, non-sequential/duplicate priorities)."
          },
          "404": {
            "description": "User not found or tag not found."
          }
        },
        "summary": "Set/Replace all tags for a user with priorities",
        "tags": [
          "Users"
        ]
      }
    },
    "/tags": {
      "get": {
        "operationId": "TagsController_findAllTags",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all tags in the system",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all tags",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{id}": {
      "get": {
        "operationId": "TagsController_findTagById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tag with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found"
          }
        },
        "summary": "Get a tag by ID",
        "tags": [
          "tags"
        ]
      }
    },
    "/tags/{id}/similar": {
      "get": {
        "operationId": "TagsController_findSimilarTagsByTagId",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tag ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "minSimilarity",
            "required": false,
            "in": "query",
            "description": "Minimum similarity score (0-1)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of similar tags with similarity scores",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagSimilarity"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag not found"
          }
        },
        "summary": "Get similar tags to a given tag",
        "tags": [
          "tags"
        ]
      }
    },
    "/admin/tags/bulk-import": {
      "post": {
        "operationId": "AdminController_bulkImport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "New Tags and similarities for the application",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkImportDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tags and similarities successfully imported",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Tags and similarities imported successfully"
                    },
                    "tagsProcessed": {
                      "type": "number",
                      "example": 10
                    },
                    "similaritiesReplaced": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data or inconsistent tags and similarities"
          }
        },
        "summary": "Bulk import tags and their similarities",
        "tags": [
          "admin"
        ]
      }
    }
  },
  "info": {
    "title": "MatchMaker API",
    "description": "The MatchMaker API for matching students with thesis supervisors",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "matchmaker",
      "description": ""
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "Role": {
        "type": "string",
        "enum": [
          "STUDENT",
          "SUPERVISOR",
          "ADMIN"
        ],
        "description": "Role of the user in the system"
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user",
            "example": "studentId@fhstp.ac.at"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the user",
            "example": "Max"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the user",
            "example": "Mustermann"
          },
          "role": {
            "description": "Role of the user in the system",
            "example": "STUDENT",
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          },
          "profile_image": {
            "type": "string",
            "description": "URL to user profile image",
            "example": "https://example.com/images/profile.jpg"
          }
        },
        "required": [
          "email",
          "first_name",
          "last_name",
          "role"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "studentId@fhstp.ac.at"
          },
          "first_name": {
            "type": "string",
            "description": "User first name",
            "example": "Max"
          },
          "last_name": {
            "type": "string",
            "description": "User last name",
            "example": "Mustermann"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "STUDENT",
              "SUPERVISOR",
              "ADMIN"
            ],
            "example": "STUDENT"
          },
          "profile_image": {
            "type": "object",
            "description": "URL to user profile image",
            "example": "https://example.com/images/profile.jpg"
          },
          "is_registered": {
            "type": "boolean",
            "description": "Whether user has completed registration",
            "example": false
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Whether user has been deleted (soft deletion)",
            "example": false
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when user was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when user was last updated",
            "example": "2023-01-01T00:00:00Z"
          },
          "student_profile": {
            "type": "object",
            "description": "Student profile information if role is STUDENT"
          },
          "supervisor_profile": {
            "type": "object",
            "description": "Supervisor profile information if role is SUPERVISOR"
          },
          "tags": {
            "type": "object",
            "description": "Tags associated with the user"
          },
          "blocked_users": {
            "type": "object",
            "description": "Users blocked by this user"
          },
          "blocked_by_users": {
            "type": "object",
            "description": "Users who have blocked this user"
          }
        },
        "required": [
          "id",
          "email",
          "first_name",
          "last_name",
          "role",
          "is_registered",
          "is_deleted",
          "created_at",
          "updated_at"
        ]
      },
      "UserWithRelations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "profile_image": {
            "type": "object"
          },
          "is_registered": {
            "type": "boolean"
          },
          "is_deleted": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "student_profile": {
            "type": "object"
          },
          "supervisor_profile": {
            "type": "object"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "blocked_users": {
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "blocked_by_users": {
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "id",
          "email",
          "first_name",
          "last_name",
          "role",
          "profile_image",
          "is_registered",
          "is_deleted",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "updated@fhstp.ac.at"
          },
          "first_name": {
            "type": "string",
            "description": "User first name",
            "example": "UpdatedName"
          },
          "last_name": {
            "type": "string",
            "description": "User last name",
            "example": "UpdatedLastName"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "STUDENT",
              "SUPERVISOR",
              "ADMIN"
            ],
            "example": "SUPERVISOR"
          },
          "profile_image": {
            "type": "string",
            "description": "URL to user profile image",
            "example": "https://example.com/images/updated-profile.jpg"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the tag"
          },
          "tag_name": {
            "type": "string",
            "description": "The name of the tag"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The date and time the tag was created"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The date and time the tag was last updated"
          }
        },
        "required": [
          "id",
          "tag_name",
          "created_at",
          "updated_at"
        ]
      },
      "UserTag": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "tag_id": {
            "type": "string",
            "description": "Tag ID",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "tag": {
            "description": "Related tag details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Tag"
              }
            ]
          },
          "priority": {
            "type": "number",
            "description": "Priority of this tag for the user (lower is higher priority)",
            "example": 1
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the user-tag association was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the user-tag association was last updated",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "user_id",
          "tag_id",
          "priority",
          "created_at",
          "updated_at"
        ]
      },
      "SetUserTagsDto": {
        "type": "object",
        "properties": {
          "tags": {
            "description": "An ordered list of tags with their priorities for the user. Replaces all existing tags for the user.",
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "tags"
        ]
      },
      "TagSimilarity": {
        "type": "object",
        "properties": {
          "tag": {
            "description": "The related tag",
            "allOf": [
              {
                "$ref": "#/components/schemas/Tag"
              }
            ]
          },
          "similarity": {
            "type": "number",
            "description": "Similarity score between tags (0-1)",
            "example": 0.85,
            "minimum": 0,
            "maximum": 1
          }
        },
        "required": [
          "tag",
          "similarity"
        ]
      },
      "BulkImportDto": {
        "type": "object",
        "properties": {
          "tags": {
            "description": "List of all tag names to be imported",
            "example": [
              "JavaScript",
              "TypeScript",
              "React",
              "Vue"
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "similarities": {
            "description": "List of similarity relationships between tags",
            "example": [
              {
                "field1": "JavaScript",
                "field2": "TypeScript",
                "similarity_score": 0.85
              },
              {
                "field1": "React",
                "field2": "Vue",
                "similarity_score": 0.7
              }
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "tags",
          "similarities"
        ]
      }
    }
  }
}