{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns a greeting message"
          }
        },
        "summary": "Hello World endpoint",
        "tags": [
          "app"
        ]
      }
    },
    "/users/check-registration": {
      "get": {
        "description": "Securely checks if a user with the given email exists and its registration status. Only works with the email from your verified JWT.",
        "operationId": "UsersController_checkUserRegistration",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns user existence and registration status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserExistsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT is missing or invalid."
          },
          "403": {
            "description": "Forbidden - Email mismatch with JWT."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Check if user needs to register",
        "tags": [
          "Users"
        ]
      }
    },
    "/users": {
      "post": {
        "description": "Creates a new user (defaults to student role) or links an existing supervisor account to the Clerk identity. Uses JWT validation to ensure secure registration without requiring pre-existing clerk_id.",
        "operationId": "UsersController_createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "User data to create a new user or register an existing supervisor",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User has been successfully created or registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data (e.g., missing first/last name for new student)."
          },
          "401": {
            "description": "Unauthorized - JWT is missing or invalid."
          },
          "409": {
            "description": "Conflict - User already registered, or non-supervisor account exists with this email."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new user or register existing supervisor account",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Retrieves all users. Restricted to administrators only.",
        "operationId": "UsersController_findAllUsers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return all active users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Not authorized to access this endpoint"
          }
        },
        "summary": "Get all users",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search": {
      "get": {
        "description": "Search for users by email, first name, last name, or tag names with a single search string.",
        "operationId": "UsersController_searchUsers",
        "parameters": [
          {
            "name": "query",
            "required": true,
            "in": "query",
            "description": "Search string to match against email, first name, last name, or tag names (case insensitive, partial match)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns users matching the search criteria (limited to 15 results)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid parameter"
          }
        },
        "summary": "Unified search for users",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search/by-email": {
      "get": {
        "description": "Find a user by their email address.",
        "operationId": "UsersController_findUserByEmail",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "query",
            "description": "Email address to search for (exact match)",
            "schema": {
              "example": "studentId@fhstp.ac.at",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user with the matching email.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "summary": "Search user by email",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search/by-first-name": {
      "get": {
        "description": "Find users by matching their first name. Will return multiple users if multiple matches are found.",
        "operationId": "UsersController_findUsersByFirstName",
        "parameters": [
          {
            "name": "firstName",
            "required": true,
            "in": "query",
            "description": "First name to search for (case insensitive, partial match)",
            "schema": {
              "example": "Max",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return users matching the given first name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "summary": "Search users by first name",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search/by-last-name": {
      "get": {
        "description": "Find users by matching their last name. Will return multiple users if multiple matches are found.",
        "operationId": "UsersController_findUsersByLastName",
        "parameters": [
          {
            "name": "lastName",
            "required": true,
            "in": "query",
            "description": "Last name to search for (case insensitive, partial match)",
            "schema": {
              "example": "Mustermann",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return users matching the given last name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "summary": "Search users by last name",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search/by-tag": {
      "get": {
        "description": "Find users associated with a specific research interest or skill tag. Returns all users that have the specified tag.",
        "operationId": "UsersController_findUsersByTagId",
        "parameters": [
          {
            "name": "tagId",
            "required": true,
            "in": "query",
            "description": "Tag ID to search for (UUID)",
            "schema": {
              "format": "uuid",
              "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return users with the specified tag.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid Tag ID format."
          },
          "404": {
            "description": "Not found - Tag does not exist."
          }
        },
        "summary": "Search users by tag ID",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/search/by-tags": {
      "get": {
        "description": "Find users associated with any of the specified research interests or skill tags. Returns all users that have at least one of the specified tags.",
        "operationId": "UsersController_findUsersByTagIds",
        "parameters": [
          {
            "name": "tagIds",
            "required": true,
            "in": "query",
            "description": "Comma-separated list of tag IDs (UUIDs)",
            "schema": {
              "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479,e47ac10b-58cc-4372-a567-0e02b2c3d480",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return users with any of the specified tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid Tag ID format in list."
          },
          "404": {
            "description": "Not found - One or more tags do not exist."
          }
        },
        "summary": "Search users by multiple tag IDs",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Retrieves a specific user by their unique identifier.",
        "operationId": "UsersController_findUserById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The user unique identifier (UUID)",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the user with the matching id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid User ID format."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Get user by id",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "description": "Update a user's information such as name, email, profile image, and registration status.",
        "operationId": "UsersController_updateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User unique identifier (UUID)",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The fields to update on the user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input data or ID format."
          },
          "404": {
            "description": "User not found."
          },
          "409": {
            "description": "Conflict - Update violates unique constraint."
          }
        },
        "summary": "Update user",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Soft delete a user. Preserves data but marks user as deleted and they will no longer appear in regular queries.",
        "operationId": "UsersController_deleteUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User unique identifier (UUID)",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User has been successfully deleted."
          },
          "400": {
            "description": "Bad request - Invalid User ID format."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Delete user (Soft Delete)",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/with-relations": {
      "get": {
        "description": "Retrieve a specific user with their student/supervisor profile, tags, and block relationships.",
        "operationId": "UsersController_findUserByIdWithRelations",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User unique identifier (UUID)",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the user with the specified ID including all their relations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserWithRelations"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid User ID format."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Get user by ID with all related entities",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/tags": {
      "get": {
        "description": "Retrieves all tags assigned to a specific user with their priority ordering. Tags are sorted by priority where 1 is highest priority.",
        "operationId": "UsersController_findUserTagsByUserId",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User unique identifier (UUID)",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of a user's tags with their priorities and tag details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid User ID format."
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Get all tags assigned to a user",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Updates all tags for a user with the specified priorities. This operation replaces all existing tags with the new set provided.",
        "operationId": "UsersController_setUserTagsByUserId",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User unique identifier (UUID)",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The new tags and priorities for the user. Priorities must be sequential starting with 1.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserTagsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User tags updated successfully. Returns the new list of user tags with their priorities.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTag"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input, non-sequential priorities, duplicate priorities, or invalid tag IDs."
          },
          "404": {
            "description": "User not found or one or more tags not found."
          }
        },
        "summary": "Set/Replace all tags for a user with priorities",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/blocks": {
      "get": {
        "description": "Retrieves a list of all supervisors that have been blocked by the specified student.",
        "operationId": "UsersController_findBlockedSupervisorsByStudentUserId",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The User ID of the student (UUID)",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of blocked supervisors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBlock"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - User is not a student"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Get all supervisors blocked by a student",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "description": "Allows a student to block a supervisor, preventing them from appearing in recommendations.",
        "operationId": "UsersController_createUserBlock",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The User ID of the student (UUID)",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The User ID (UUID) of the supervisor to block",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserBlockDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Supervisor has been successfully blocked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBlock"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or validation error"
          },
          "404": {
            "description": "User not found"
          }
        },
        "summary": "Block a supervisor",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}/blocks/{blockedId}": {
      "delete": {
        "description": "Removes a block from a supervisor, allowing them to appear in recommendations again.",
        "operationId": "UsersController_removeUserBlock",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The User ID of the student (UUID)",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "blockedId",
            "required": true,
            "in": "path",
            "description": "The User ID of the supervisor (UUID) to unblock",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174001",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Supervisor has been successfully unblocked"
          },
          "404": {
            "description": "User or block relationship not found"
          }
        },
        "summary": "Unblock a supervisor",
        "tags": [
          "Users"
        ]
      }
    },
    "/tags": {
      "get": {
        "description": "Retrieves a list of all available tags in the system that can be used for searching and filtering users.",
        "operationId": "TagsController_findAllTags",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of all tags in the system",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all tags",
        "tags": [
          "Tags"
        ]
      }
    },
    "/tags/{id}": {
      "get": {
        "description": "Retrieves detailed information about a specific tag identified by its UUID.",
        "operationId": "TagsController_findTagById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tag unique identifier (UUID)",
            "schema": {
              "format": "uuid",
              "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the tag with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "404": {
            "description": "Tag with the specified ID was not found in the system"
          }
        },
        "summary": "Get a tag by ID",
        "tags": [
          "Tags"
        ]
      }
    },
    "/tags/{id}/similar": {
      "get": {
        "description": "Finds tags that are semantically similar to the specified tag, with optional minimum similarity threshold.",
        "operationId": "TagsController_findSimilarTagsByTagId",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Tag unique identifier (UUID)",
            "schema": {
              "format": "uuid",
              "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "type": "string"
            }
          },
          {
            "name": "minSimilarity",
            "required": false,
            "in": "query",
            "description": "Minimum similarity score threshold (0-1). Only tags with similarity scores above this value will be returned.",
            "schema": {
              "example": 0.5,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of similar tags with their similarity scores",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagSimilarity"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Tag with the specified ID was not found in the system"
          }
        },
        "summary": "Get similar tags to a given tag",
        "tags": [
          "Tags"
        ]
      }
    },
    "/supervisors": {
      "get": {
        "operationId": "SupervisorsController_findAllSupervisors",
        "parameters": [
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Limit the number of supervisors returned",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "availableOnly",
            "required": false,
            "in": "query",
            "description": "Only return supervisors with available spots",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of supervisor profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Supervisor"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all supervisors with optional filtering",
        "tags": [
          "supervisors"
        ]
      }
    },
    "/supervisors/user/{userId}": {
      "get": {
        "operationId": "SupervisorsController_findSupervisorByUserId",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the user",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a supervisor profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supervisor"
                }
              }
            }
          },
          "404": {
            "description": "Supervisor not found"
          }
        },
        "summary": "Get a supervisor by User ID",
        "tags": [
          "supervisors"
        ]
      }
    },
    "/supervisors/{id}": {
      "get": {
        "operationId": "SupervisorsController_findSupervisorById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Supervisor ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a supervisor profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Supervisor"
                }
              }
            }
          },
          "404": {
            "description": "Supervisor not found"
          }
        },
        "summary": "Get a supervisor by ID",
        "tags": [
          "supervisors"
        ]
      },
      "patch": {
        "operationId": "SupervisorsController_updateSupervisorProfile",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Supervisor ID",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSupervisorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Supervisor profile updated successfully"
          },
          "404": {
            "description": "Supervisor not found"
          }
        },
        "summary": "Partially update a supervisor profile",
        "tags": [
          "supervisors"
        ]
      }
    },
    "/students": {
      "get": {
        "operationId": "StudentsController_findAllStudents",
        "parameters": [
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Limit the number of students returned",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of student profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Student"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all students with optional filtering",
        "tags": [
          "students"
        ]
      },
      "post": {
        "operationId": "StudentsController_createStudentProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Student profile creation data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStudentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Student profile created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "409": {
            "description": "Student profile already exists for this user"
          }
        },
        "summary": "Create a new student profile",
        "tags": [
          "students"
        ]
      }
    },
    "/students/user/{userId}": {
      "get": {
        "operationId": "StudentsController_findStudentByUserId",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the user",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a student profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "404": {
            "description": "Student not found"
          }
        },
        "summary": "Get a student by User ID",
        "tags": [
          "students"
        ]
      }
    },
    "/students/{id}/relations": {
      "get": {
        "operationId": "StudentsController_findStudentByIdWithRelations",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the student profile",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a student profile with relations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StudentWithRelations"
                }
              }
            }
          },
          "404": {
            "description": "Student not found"
          }
        },
        "summary": "Get a student by ID with all relations",
        "tags": [
          "students"
        ]
      }
    },
    "/students/{id}": {
      "get": {
        "operationId": "StudentsController_findStudentById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the student",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a student profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "404": {
            "description": "Student not found"
          }
        },
        "summary": "Get a student by ID",
        "tags": [
          "students"
        ]
      },
      "patch": {
        "operationId": "StudentsController_updateStudentProfile",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Unique identifier of the student",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Student profile update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStudentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Student profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to update this profile"
          },
          "404": {
            "description": "Student not found"
          }
        },
        "summary": "Partially update a student profile",
        "tags": [
          "students"
        ]
      }
    },
    "/admin/tags/bulk-import": {
      "post": {
        "operationId": "AdminController_tagsBulkImport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "New Tags and similarities for the application",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagsBulkImportDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tags and similarities successfully imported",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Tags and similarities imported successfully"
                    },
                    "tagsProcessed": {
                      "type": "number",
                      "example": 10
                    },
                    "similaritiesReplaced": {
                      "type": "number",
                      "example": 25
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data or inconsistent tags and similarities"
          }
        },
        "summary": "Bulk import tags and their similarities",
        "tags": [
          "admin"
        ]
      }
    },
    "/admin/supervisors/bulk-import": {
      "post": {
        "operationId": "AdminController_supervisorsBulkImport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "New Supervisors for the application",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupervisorsBulkImportDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Supervisors successfully imported",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Supervisors successfully imported"
                    },
                    "supervisorsImported": {
                      "type": "number",
                      "example": 10
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data"
          }
        },
        "summary": "Bulk import Supervisors and their profiles",
        "tags": [
          "admin"
        ]
      }
    },
    "/match/{userId}": {
      "get": {
        "description": "Calculate and retrieve a list of all supervisors with their compatibility scores for a specific student",
        "operationId": "MatchingController_calculateCompatibilityScore",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "User unique identifier (UUID)",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of supervisors with compatibility scores for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Match"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid User ID format."
          },
          "404": {
            "description": "User not found."
          }
        },
        "summary": "Get all supervisors with compatibility scores for a user",
        "tags": [
          "Matching"
        ]
      }
    },
    "/supervision-requests": {
      "post": {
        "description": "Creates a new supervision request. Behavior differs based on user role. When a supervisor creates a request for a student email that is not in the system, a new student account will be automatically created and the response will include a studentWasCreated flag.",
        "operationId": "SupervisionRequestsController_createSupervisionRequest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSupervisionRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupervisionRequestEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid data or constraints violated"
          }
        },
        "summary": "Create a supervision request",
        "tags": [
          "supervision-requests"
        ]
      },
      "get": {
        "description": "Retrieves all supervision requests with optional filtering by state",
        "operationId": "SupervisionRequestsController_findAllSupervisionRequests",
        "parameters": [
          {
            "name": "request_state",
            "required": false,
            "in": "query",
            "description": "Filter by request state",
            "schema": {
              "enum": [
                "PENDING",
                "ACCEPTED",
                "REJECTED",
                "WITHDRAWN"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all supervision requests matching query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupervisionRequestWithUsersEntity"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all supervision requests",
        "tags": [
          "supervision-requests"
        ]
      }
    },
    "/supervision-requests/{id}": {
      "get": {
        "description": "Retrieves a specific supervision request",
        "operationId": "SupervisionRequestsController_findSupervisionRequestById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Supervision request ID",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the supervision request with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupervisionRequestWithUsersEntity"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User does not have permission to view this request"
          },
          "404": {
            "description": "Supervision request not found"
          }
        },
        "summary": "Get a supervision request by ID",
        "tags": [
          "supervision-requests"
        ]
      },
      "patch": {
        "description": "Updates the state of a supervision request",
        "operationId": "SupervisionRequestsController_updateSupervisionRequestState",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Supervision request ID",
            "schema": {
              "format": "uuid",
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSupervisionRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated supervision request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupervisionRequestEntity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid state transition for the user role"
          },
          "403": {
            "description": "Forbidden - User does not have permission to update this request"
          },
          "404": {
            "description": "Supervision request not found"
          }
        },
        "summary": "Update a supervision request state",
        "tags": [
          "supervision-requests"
        ]
      }
    }
  },
  "info": {
    "title": "MatchMaker API",
    "description": "The MatchMaker API for matching students with thesis supervisors",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "matchmaker",
      "description": ""
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "UserExistsDto": {
        "type": "object",
        "properties": {
          "exists": {
            "type": "boolean",
            "description": "Whether a user with this email exists in our system",
            "example": true
          },
          "is_registered": {
            "type": "boolean",
            "description": "Whether the user has completed registration. If exists=true and is_registered=true, go-to dashboard. If exists=true and is_registered=false, show registration form for supervisor. If exists=false, show registration form for student.",
            "example": false
          },
          "role": {
            "type": "string",
            "description": "The role of the user in the system (student, supervisor, or admin)",
            "enum": [
              "STUDENT",
              "SUPERVISOR",
              "ADMIN"
            ],
            "example": "STUDENT"
          }
        },
        "required": [
          "exists",
          "is_registered"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address of the user",
            "example": "studentId@fhstp.ac.at"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the user. Required if creating a new student account.",
            "example": "Max"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the user. Required if creating a new student account.",
            "example": "Mustermann"
          },
          "profile_image": {
            "type": "string",
            "description": "URL to user profile image",
            "example": "https://example.com/images/profile.jpg"
          }
        },
        "required": [
          "email"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "clerk_id": {
            "type": "object",
            "description": "User's Clerk ID. Available if the user is registered via Clerk.",
            "example": "user_2VgdKDGF1Y3oMf4QmIaYM0uyvlY",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "studentId@fhstp.ac.at"
          },
          "first_name": {
            "type": "string",
            "description": "User first name",
            "example": "Max"
          },
          "last_name": {
            "type": "string",
            "description": "User last name",
            "example": "Mustermann"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "enum": [
              "STUDENT",
              "SUPERVISOR",
              "ADMIN"
            ],
            "example": "STUDENT"
          },
          "profile_image": {
            "type": "object",
            "description": "URL to user profile image",
            "example": "https://example.com/images/profile.jpg",
            "nullable": true
          },
          "is_registered": {
            "type": "boolean",
            "description": "Whether user has completed registration and is linked to clerk auth provider",
            "example": true
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Whether user has been deleted (soft deletion)",
            "example": false
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when user was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when user was last updated",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "clerk_id",
          "email",
          "first_name",
          "last_name",
          "role",
          "profile_image",
          "is_registered",
          "is_deleted",
          "created_at",
          "updated_at"
        ]
      },
      "Role": {
        "type": "string",
        "enum": [
          "STUDENT",
          "SUPERVISOR",
          "ADMIN"
        ],
        "description": "User role in the system (STUDENT, SUPERVISOR, or ADMIN)"
      },
      "UserWithRelations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User unique identifier (UUID)",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "clerk_id": {
            "type": "object",
            "description": "Clerk user ID for authentication (can only be set once)",
            "example": "user_2VgdKDGF1Y3oMf4QmIaYM0uyvlY",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "studentId@fhstp.ac.at",
            "format": "email"
          },
          "first_name": {
            "type": "string",
            "description": "User first name",
            "example": "Max"
          },
          "last_name": {
            "type": "string",
            "description": "User last name",
            "example": "Mustermann"
          },
          "role": {
            "description": "User role in the system (STUDENT, SUPERVISOR, or ADMIN)",
            "example": "STUDENT",
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ]
          },
          "profile_image": {
            "type": "object",
            "description": "URL to user profile image (null if not set)",
            "example": "https://example.com/images/profile.jpg",
            "nullable": true
          },
          "is_registered": {
            "type": "boolean",
            "description": "Whether user has completed registration process",
            "example": true
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Whether user has been soft deleted from the system",
            "example": false
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when user was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when user was last updated",
            "example": "2023-01-01T00:00:00Z"
          },
          "student_profile": {
            "type": "object",
            "description": "Student profile data if the user is a student",
            "nullable": true,
            "example": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "user_id": "123e4567-e89b-12d3-a456-426614174000",
              "thesis_description": "AI-based recommendation system for supervisor matching",
              "created_at": "2023-01-01T00:00:00Z",
              "updated_at": "2023-01-01T00:00:00Z"
            }
          },
          "supervisor_profile": {
            "type": "object",
            "description": "Supervisor profile data if the user is a supervisor",
            "nullable": true,
            "example": {
              "id": "123e4567-e89b-12d3-a456-426614174000",
              "user_id": "123e4567-e89b-12d3-a456-426614174000",
              "bio": "I specialize in AI and machine learning with 15+ years of industry and academic experience. My current research focuses on ethical AI applications in healthcare. I enjoy mentoring students who are passionate about pushing the boundaries of technology.",
              "max_slots": 5,
              "current_slots": 2,
              "created_at": "2023-01-01T00:00:00Z",
              "updated_at": "2023-01-01T00:00:00Z"
            }
          },
          "tags": {
            "description": "List of tags associated with this user and their priorities",
            "example": [
              {
                "user_id": "123e4567-e89b-12d3-a456-426614174000",
                "tag_id": "abc4567-e89b-12d3-a456-426614174001",
                "priority": 1,
                "tag": {
                  "id": "abc4567-e89b-12d3-a456-426614174001",
                  "tag_name": "Machine Learning",
                  "created_at": "2023-01-01T00:00:00Z",
                  "updated_at": "2023-01-01T00:00:00Z"
                },
                "created_at": "2023-01-01T00:00:00Z",
                "updated_at": "2023-01-01T00:00:00Z"
              },
              {
                "user_id": "123e4567-e89b-12d3-a456-426614174000",
                "tag_id": "def4567-e89b-12d3-a456-426614174002",
                "priority": 2,
                "tag": {
                  "id": "def4567-e89b-12d3-a456-426614174002",
                  "tag_name": "Data Science",
                  "created_at": "2023-01-01T00:00:00Z",
                  "updated_at": "2023-01-01T00:00:00Z"
                },
                "created_at": "2023-01-01T00:00:00Z",
                "updated_at": "2023-01-01T00:00:00Z"
              }
            ],
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "blocked_users": {
            "description": "List of users blocked by this user",
            "example": [
              {
                "blocker_id": "123e4567-e89b-12d3-a456-426614174000",
                "blocked_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                "created_at": "2023-01-01T00:00:00Z",
                "updated_at": "2023-01-01T00:00:00Z"
              }
            ],
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "blocked_by_users": {
            "description": "List of users who have blocked this user",
            "example": [
              {
                "blocker_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                "blocked_id": "123e4567-e89b-12d3-a456-426614174000",
                "created_at": "2023-01-01T00:00:00Z",
                "updated_at": "2023-01-01T00:00:00Z"
              }
            ],
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "id",
          "clerk_id",
          "email",
          "first_name",
          "last_name",
          "role",
          "profile_image",
          "is_registered",
          "is_deleted",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "updated@fhstp.ac.at"
          },
          "first_name": {
            "type": "string",
            "description": "User first name",
            "example": "UpdatedName"
          },
          "last_name": {
            "type": "string",
            "description": "User last name",
            "example": "UpdatedLastName"
          },
          "profile_image": {
            "type": "string",
            "description": "URL to user profile image",
            "example": "https://example.com/images/updated-profile.jpg"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the tag",
            "example": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
            "format": "uuid"
          },
          "tag_name": {
            "type": "string",
            "description": "The name of the tag",
            "example": "Machine Learning",
            "maxLength": 100
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "The date and time the tag was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "The date and time the tag was last updated",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "tag_name",
          "created_at",
          "updated_at"
        ]
      },
      "UserTag": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "User ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "tag_id": {
            "type": "string",
            "description": "Tag ID",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "tag": {
            "description": "Related tag details",
            "allOf": [
              {
                "$ref": "#/components/schemas/Tag"
              }
            ]
          },
          "priority": {
            "type": "number",
            "description": "Priority of this tag for the user (lower is higher priority)",
            "example": 1
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the user-tag association was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the user-tag association was last updated",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "user_id",
          "tag_id",
          "priority",
          "created_at",
          "updated_at"
        ]
      },
      "SetUserTagsDto": {
        "type": "object",
        "properties": {
          "tags": {
            "description": "An ordered list of tags with their priorities for the user. Replaces all existing tags for the user.",
            "example": [
              {
                "tag_id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                "priority": 1
              },
              {
                "tag_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                "priority": 2
              },
              {
                "tag_id": "f47ac10b-54cc-6453-b567-0e02b2c3d479",
                "priority": 3
              }
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "tags"
        ]
      },
      "UserBlock": {
        "type": "object",
        "properties": {
          "blocker_id": {
            "type": "string",
            "description": "ID of the user who initiated the block",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "blocked_id": {
            "type": "string",
            "description": "ID of the user who is being blocked",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "format": "uuid"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when the block was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when the block was last updated",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "blocker_id",
          "blocked_id",
          "created_at",
          "updated_at"
        ]
      },
      "CreateUserBlockDto": {
        "type": "object",
        "properties": {
          "blocked_id": {
            "type": "string",
            "description": "ID of the user to block",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "format": "uuid"
          }
        },
        "required": [
          "blocked_id"
        ]
      },
      "TagSimilarity": {
        "type": "object",
        "properties": {
          "tag": {
            "description": "The related tag with its full details",
            "example": {
              "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
              "tag_name": "Machine Learning",
              "created_at": "2023-01-01T00:00:00Z",
              "updated_at": "2023-01-01T00:00:00Z"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/Tag"
              }
            ]
          },
          "similarity": {
            "type": "number",
            "description": "Similarity score between two tags (0-1, where 1 is identical)",
            "example": 0.85,
            "minimum": 0,
            "maximum": 1
          }
        },
        "required": [
          "tag",
          "similarity"
        ]
      },
      "Supervisor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the supervisor",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "user_id": {
            "type": "string",
            "description": "The user ID associated with this supervisor",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "bio": {
            "type": "object",
            "description": "Supervisor bio or description",
            "example": "Professor specializing in artificial intelligence and machine learning",
            "nullable": true
          },
          "available_spots": {
            "type": "number",
            "description": "Number of available supervision spots",
            "example": 3
          },
          "total_spots": {
            "type": "number",
            "description": "Total number of supervision spots",
            "example": 5
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the supervisor profile was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the supervisor profile was last updated",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "user_id",
          "bio",
          "available_spots",
          "total_spots",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateSupervisorDto": {
        "type": "object",
        "properties": {
          "bio": {
            "type": "string",
            "description": "The supervisor bio",
            "example": "Professor specializing in artificial intelligence and machine learning"
          },
          "available_spots": {
            "type": "number",
            "description": "Number of available spots for supervision",
            "example": 3
          },
          "total_spots": {
            "type": "number",
            "description": "Total spots for supervision",
            "example": 5
          }
        }
      },
      "Student": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Student unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "thesis_description": {
            "type": "object",
            "description": "Brief description of thesis or research interests",
            "example": "AI-based recommendation system for supervisor matching",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "description": "ID of the user this student profile belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when the student profile was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when the student profile was last updated",
            "example": "2023-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "thesis_description",
          "user_id",
          "created_at",
          "updated_at"
        ]
      },
      "StudentWithRelations": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Student unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "thesis_description": {
            "type": "object",
            "description": "Brief description of thesis or research interests",
            "example": "AI-based recommendation system for supervisor matching",
            "nullable": true
          },
          "user_id": {
            "type": "string",
            "description": "ID of the user this student profile belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when the student profile was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp when the student profile was last updated",
            "example": "2023-01-01T00:00:00Z"
          },
          "user": {
            "description": "Associated user data",
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              }
            ]
          },
          "supervision_requests": {
            "description": "Supervision requests sent by this student",
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "chat_requests": {
            "description": "Chat requests sent by this student",
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "thesis_description",
          "user_id",
          "created_at",
          "updated_at"
        ]
      },
      "CreateStudentDto": {
        "type": "object",
        "properties": {
          "thesis_description": {
            "type": "string",
            "description": "Brief description of the student's thesis or research interests",
            "example": "AI-based recommendation system for supervisor matching",
            "maxLength": 2000
          }
        }
      },
      "UpdateStudentDto": {
        "type": "object",
        "properties": {
          "thesis_description": {
            "type": "string",
            "description": "Brief description of the student's thesis or research interests",
            "example": "AI-based recommendation system for supervisor matching",
            "maxLength": 2000
          }
        }
      },
      "TagsBulkImportDto": {
        "type": "object",
        "properties": {
          "tags": {
            "description": "List of all tag names to be imported",
            "example": [
              "JavaScript",
              "TypeScript",
              "React",
              "Vue"
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          },
          "similarities": {
            "description": "List of similarity relationships between tags",
            "example": [
              {
                "field1": "JavaScript",
                "field2": "TypeScript",
                "similarity_score": 0.85
              },
              {
                "field1": "React",
                "field2": "Vue",
                "similarity_score": 0.7
              }
            ],
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "tags",
          "similarities"
        ]
      },
      "SupervisorsBulkImportDto": {
        "type": "object",
        "properties": {
          "supervisors": {
            "description": "Array of supervisor data to import",
            "items": {
              "type": "array"
            },
            "type": "array"
          }
        },
        "required": [
          "supervisors"
        ]
      },
      "Match": {
        "type": "object",
        "properties": {
          "supervisorId": {
            "type": "string",
            "description": "The unique identifier of the supervisor record",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "supervisor_userId": {
            "type": "string",
            "description": "The unique identifier of the supervisor user in this match",
            "example": "15d2a5bc-c547-444d-91fb-b1c498ada33c"
          },
          "firstName": {
            "type": "string",
            "description": "The supervisor's first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "The supervisor's last name",
            "example": "Smith"
          },
          "compatibilityScore": {
            "type": "number",
            "description": "Compatibility score between student and supervisor (0-1)",
            "example": 0.85,
            "minimum": 0,
            "maximum": 1
          },
          "bio": {
            "type": "string",
            "description": "The supervisor bio",
            "example": "Professor specializing in artificial intelligence and machine learning"
          },
          "tags": {
            "description": "The supervisor tags",
            "example": [
              "Machine Learning",
              "AI"
            ],
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "availableSpots": {
            "type": "number",
            "description": "Available supervision spots",
            "example": 3
          },
          "totalSpots": {
            "type": "number",
            "description": "Total supervision spots",
            "example": 5
          },
          "pendingRequests": {
            "type": "number",
            "description": "Number of pending requests for this supervisor",
            "example": 2
          }
        },
        "required": [
          "supervisorId",
          "supervisor_userId",
          "firstName",
          "lastName",
          "compatibilityScore",
          "bio",
          "tags",
          "availableSpots",
          "totalSpots",
          "pendingRequests"
        ]
      },
      "CreateSupervisionRequestDto": {
        "type": "object",
        "properties": {
          "supervisor_id": {
            "type": "string",
            "description": "The supervisor ID (required for student requests)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "student_email": {
            "type": "string",
            "description": "The student email (required for supervisor requests). If the student does not exist, a new account will be created.",
            "example": "student@fhstp.ac.at"
          }
        }
      },
      "SupervisionRequestEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the supervision request",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "request_state": {
            "type": "string",
            "description": "Current state of the supervision request",
            "enum": [
              "PENDING",
              "ACCEPTED",
              "REJECTED",
              "WITHDRAWN"
            ],
            "example": "PENDING"
          },
          "student_id": {
            "type": "string",
            "description": "ID of the student who sent the request",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "supervisor_id": {
            "type": "string",
            "description": "ID of the supervisor who received the request",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the request was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the request was last updated",
            "example": "2023-01-01T00:00:00Z"
          },
          "studentWasCreated": {
            "type": "boolean",
            "description": "Indicates if a new student account was created during this request"
          }
        },
        "required": [
          "id",
          "request_state",
          "student_id",
          "supervisor_id",
          "created_at",
          "updated_at"
        ]
      },
      "UserBasicInfo": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "User email",
            "example": "john.doe@fhstp.ac.at"
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email"
        ]
      },
      "StudentWithUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Student ID",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "description": "User ID associated with the student",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "description": "Basic user information",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasicInfo"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "user"
        ]
      },
      "SupervisorWithUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Supervisor ID",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "description": "User ID associated with the supervisor",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "user": {
            "description": "Basic user information",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasicInfo"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "user"
        ]
      },
      "SupervisionRequestWithUsersEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the supervision request",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "request_state": {
            "type": "string",
            "description": "Current state of the supervision request",
            "enum": [
              "PENDING",
              "ACCEPTED",
              "REJECTED",
              "WITHDRAWN"
            ],
            "example": "PENDING"
          },
          "student_id": {
            "type": "string",
            "description": "ID of the student who sent the request",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "supervisor_id": {
            "type": "string",
            "description": "ID of the supervisor who received the request",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the request was created",
            "example": "2023-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the request was last updated",
            "example": "2023-01-01T00:00:00Z"
          },
          "studentWasCreated": {
            "type": "boolean",
            "description": "Indicates if a new student account was created during this request"
          },
          "student": {
            "description": "Student who sent the request",
            "allOf": [
              {
                "$ref": "#/components/schemas/StudentWithUser"
              }
            ]
          },
          "supervisor": {
            "description": "Supervisor who received the request",
            "allOf": [
              {
                "$ref": "#/components/schemas/SupervisorWithUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "request_state",
          "student_id",
          "supervisor_id",
          "created_at",
          "updated_at",
          "student",
          "supervisor"
        ]
      },
      "UpdateSupervisionRequestDto": {
        "type": "object",
        "properties": {
          "request_state": {
            "type": "string",
            "description": "The new state of the request",
            "enum": [
              "PENDING",
              "ACCEPTED",
              "REJECTED",
              "WITHDRAWN"
            ],
            "example": "ACCEPTED"
          }
        },
        "required": [
          "request_state"
        ]
      }
    }
  }
}